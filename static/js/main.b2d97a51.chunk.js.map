{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_this$props","this","props","name","email","id","react_default","a","createElement","className","src","concat","alt","Component","CardList","robots","map","user","components_Card","key","SearchBox","type","placeholder","onChange","onSearchChange","Scroll","style","overflowY","border","maxHeight","children","ErrorBoundry","state","hasError","error","info","setState","Header","console","log","App","onGetRebots","_this","filteredRobots","filter","robot","toLocaleLowerCase","includes","searchvalue","isPending","Header_Header","components_SearchBox","components_Scroll","ErrorBoundry_ErrorBoundry","components_CardList","connect","searchRobots","getRobots","dispatch","e","payload","target","value","fetch","then","res","json","users","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2d97a51.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Card extends Component {\r\n  render() {\r\n      const { name, email, id } = this.props;\r\n    return (\r\n      <div className=\"bg-light-green dib br3 pa3 ma2 grow bw-2 shadow-5 tc\">\r\n        <img src={`https://robohash.org/${id}?200x200`} alt=\"\"/>\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react'\r\nimport Card from './Card';\r\n\r\nclass CardList extends Component {\r\n  render() {\r\n    const {robots} = this.props;\r\n    return (\r\n      <div>\r\n        {robots.map((user) => {\r\n        return <Card name={user.name} email={user.email} id={user.id} key={user.id}/>\r\n      })}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react'\r\n\r\nclass SearchBox extends Component {\r\n  render() {\r\n    return (\r\n    <div className=\"pa2\">\r\n      <input type=\"search\" placeholder=\"search robots\" className=\"pa3 ba b--green bg-lightest-blue\" onChange={this.props.onSearchChange}/>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react'\r\n\r\nclass Scroll extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{overflowY: 'scroll', border: '2px solid black', maxHeight: '80vh'}}>\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nexport default class ErrorBoundry extends Component {\r\n    state = {\r\n        hasError: false\r\n    }\r\n    componentDidCatch(error, info) {\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n  render() {\r\n    return this.state.hasError ? (<h1>Ups something went wrong</h1>) : (this.props.children)\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Header extends Component {\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n  render() {\r\n    console.log(\"header\")\r\n    return (\r\n        <h1 className=\"f1\">RobotFriends</h1>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from './components/CardList';\r\nimport SearchBox from './components/SearchBox';\r\nimport Scroll from './components/Scroll';\r\nimport ErrorBoundry from './components/ErrorBoundry';\r\nimport { setSearchValue, getRobots} from './actions';\r\nimport Header from './components/Header';\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onGetRebots();\r\n    }\r\n\r\n  render() {\r\n    const filteredRobots = this.props.robots.filter(robot => {\r\n        return robot.name.toLocaleLowerCase().includes(this.props.searchvalue.toLocaleLowerCase());\r\n    })\r\n    return this.props.isPending ? (<h1>Loading data</h1>)\r\n    :(\r\n        <div className=\"tc\">\r\n        <Header/>\r\n        <SearchBox onSearchChange={this.props.onSearchChange}/>\r\n        <Scroll>\r\n        <ErrorBoundry>\r\n            <CardList robots={filteredRobots}/>\r\n        </ErrorBoundry>\r\n        </Scroll>\r\n        </div>\r\n    )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    searchvalue: state.searchRobots.searchvalue,\r\n    robots: state.getRobots.robots,\r\n    isPending: state.getRobots.isPending,\r\n    error: state.getRobots.error\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onSearchChange: (e) => dispatch(setSearchValue(e.target.value)),\r\n    onGetRebots: () => dispatch(getRobots())\r\n})\r\n \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_VALUE,\r\n    GET_ROBOTS_FAILED,\r\n    GET_ROBOTS_SUCCESS,\r\n    GET_ROBOTS_PENDING\r\n} from './constants';\r\n\r\nexport const setSearchValue = (text) => ({\r\n    type: CHANGE_SEARCH_VALUE,\r\n    payload: text\r\n})\r\n\r\nexport const getRobots = () => (dispatch) => {\r\n    dispatch({ type: GET_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then( res => res.json())\r\n    .then(users => dispatch({ type: GET_ROBOTS_SUCCESS, payload: users}))\r\n    .catch(error => dispatch({type: GET_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_VALUE = 'CHANGE_SEARCH_VALUE';\r\nexport const GET_ROBOTS_PENDING = 'GET_ROBOTS_PENDING';\r\nexport const GET_ROBOTS_FAILED = 'GET_ROBOTS_FAILED';\r\nexport const GET_ROBOTS_SUCCESS = 'GET_ROBOTS_SUCCESS';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_VALUE,\r\n    GET_ROBOTS_FAILED,\r\n    GET_ROBOTS_SUCCESS,\r\n    GET_ROBOTS_PENDING\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchvalue: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_VALUE:\r\n        return {...state, searchvalue: action.payload};\r\n        default:\r\n        return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: true,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const getRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case GET_ROBOTS_PENDING:\r\n         return {...state, isPending: true };\r\n        case GET_ROBOTS_SUCCESS:\r\n         return {...state, robots: action.payload, isPending: false}\r\n        case GET_ROBOTS_FAILED:\r\n         return {...state , error: action.payload, isPending: false}\r\n        default:\r\n         return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, getRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({\n    searchRobots,\n    getRobots\n})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}